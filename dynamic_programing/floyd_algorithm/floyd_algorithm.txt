플로이드 알로리즘이란 음의 싸이클이 없는 가중 방향 그래프에서 두 정점을 연결하는 최단 경로를 찾는 알고리즘이다.

플로이드 알고리즘은 모든 정점에서 모든 정점으로의 최단 경로를 한꺼번에 구하는 알고리즘으로, 어느 한 정점에서
다른 정점으로 갈때 중간 경로로 선택할 수 있는 정점의 종류를 1에서 시작하여 |v|까지 증가시킴에 따라 모든 정점
간의 최단 경로를 구하는 알고리즘이다. k 개의 정점들을 경로 후보로 하여 정점 i 에서 정점 j까지 가는 최소 거리는
k 경로를 지나지 않고 k - 1 개의 정점을 선택하는 dij(k - 1)와 k를 지나는 dik(k - 1) + dkj(k - 1)중
작은 값으로 구할 수 있다.

이는 각각의 문제를 점화식으로 나타낼 수 있으며 이때 각 소문제는 항상 일정하므로 최적성의 원리를 적용할 수 있다.

이때 dp를 풀기위해서는 구하려는 dij(k)보다 작은 소문제중 일부를 구해야한다. 이때 구해야하는 모든 경우는 i,j,k가
각각 달라질 경우이므로 3차원의 배열에 모든 소문제의 값이 저장되어야 할 것이다.
하지만 약간의 편법을 이용하여 2차원배열에 저장하는 방법을 사용해 볼것이다.

dij(k)는 k 개 종류의 노드를 경유하여 i에서 j까지 가는 최소 경로이다.
이때 dij(k)는 는 k개 종류의 노느중 특정 노드 k를 지나서 오는경우(1)
혹은 그 특정노드 k를 지나지 않고 오는 경우(2)가 있다.
(1)dij(k - 1)
(2)dik(k-1) + dkj(k-1)
이 중 최소인 경우를 선택하면 된다. 특정노드는 임의로 하나를 선택하면 될 것이다.

%%%%%%%이때 가장 주의할 점은 소문제에서 k개의 노드를 경로로 하여 지나갈때 선택할 수 있는
모든 k개의 경우의 수에 대해서 검증하는 것이 아니라 그중 하나인 1부터 k노드까지로 제한하여
확인하여도 문제없다는 점이다.
그 이유는 어차피 구하려는 dij(k)에서 k는 노드의 전체개수로 증가하여 dik(k-1)과
dkj(k-1)을 한가지 경우로 제한할 수 있기 때문이다.

마찬가지로 그 이후로 생기는 dik(k-1)의 di(k-1)(k-2)+d(k-1)j(k-2)또한 하나로
제한된다.

시간복잡도는 o(|v|^3)이다.