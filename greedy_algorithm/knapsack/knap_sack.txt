최대 용량 M인 하나의 배낭과 n개의 물체가 있고, 각 물체 i에는 물체의 무게 wi와 해당 물체를 배낭에 넣었을 때
얻을 수 있는 이익 pi가 부여되었다고 가정한다. 이때 pi의 총합이 최대가 되도록 배낭을 채우는 문제이다.

단순히 보면 무게당 이익이 큰 물건을 먼저 넣은면 될것같다(greedy)하지만 물체의 개수가
정수개일 경우 이러한 greedy는 최적해를 구하지는 못한다.

다만 꽤 괜찮은 최적값중 하나를 구할 수는 있다.

knapsack 을 greedy 로 해결한다면 로직 자체에서는 o(n)만큼의 시간 복잡도가 발생하지만.
정렬을 해야하므로 o(nlogn)만큼의 시간복잡도가 걸린다.

0/1knapsack problem vs fractional knapsack problem

#### 여기서 푼 예제는 0/1이며 fractional은 너무 쉬우므로 다루지 않았다. 그냥 그리디로 풀면 된다.


knap_sack_greedy.c를 실행했을때 35의 결과가 나왔는데 실제로는 4kg, 3kg, 3kg을 선택하면 38의 최대이익을
얻을 수 있다. 따라서 0/1 knapsack은 실제로는 그리디로 완벽하게 최적화 할 수 는 없다.


완벽하게 최적화 하기위해서는 dp를 사용해야한다.
dp를 사용했을때 시간 복잡도는 O(물건의 개수 * 최대 무게)