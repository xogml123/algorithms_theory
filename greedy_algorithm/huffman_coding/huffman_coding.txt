허프만 코딩은 문자의 빈도 또는 확률 정보를 이용하는 통계적 압축 방법으로, 문자가 텍스트에서
출현하는 빈도수를 이용하여 출현빈도수가 높은 문자는 짧은 코드, 출현 빈도수가 낮은 문자는 상대
적으로 긴 코드를 부여함으로써 전체 텍스트의 길이를 줄이는 방법이다.

예를들어 텍스트 ababcdbad를 아스키 코드, 고정길이 변환 코드, 빈도수에 따른 가변길이 변환 코드로
각각 코드화하는 경우에 필요한 저장공간의 양을 계산하시오.

1.주어진 텍스트에 대해서 8비트 아스키코드로 표현한다면 9 * 8비트 =72비트
2.그런데 만약 문자의 집합이 {a, b, c, d}라고 가정하면 두 비트의 고정길이 코드를 사용하여
00, 01, 10, 11 로 코드를 부여할 수 있다.
이렇게 하면 한 문자당 2비트로 75퍼센트 코드의 길이가 짧아 질 수 있다.

3.빈도수에 따른 가변길이 변환 코드를 사용하는 경우에는 a가 3번 b가 3번 c가 1번 d가 2번 
나타나므로, 빈도수가 높은 문자 a와 b에는 각각 0, 1의 짧은 코드를 c,d의 경우에는 00, 01을 부여한다.

문제는 이렇게 할 경우 고정 길이 변환 코드에 비해 짧아 졌지만, 문제는 실제로 사용할 수 없다.
왜냐하면 인코딩 된 비트를 왼쪽부터 디코딩 하고자 할 때 01을 a,b 로도 해석 할 수 있고 ,c로도 해석
할 수 있기 때문이다.

따라서 접두구 코드(prefix code)를 사용한다. 이것은 각 문자에 부여된 이진 코드가 접두부가 되지 않게 하는 것이다.
예를 들어 a가 101이라면 1, 10, 101등의 101로 혼동될 수 있는 가능성이있는 것들은 코드로 사용할 수 없다.

4.허프만 코드는 접두부 코드이며 최적 코드로서, 인코딩 과정은 다음의 세 단계를 거친다.
	1)주어진 텍스트에서 각 문자의 출현 빈도수를 계산한다.
	2)각 문자의 빈도수를 이용하여 허프만 트리를 생성하여 각 문자에 이진 코드를 부여한다.
	3)주어진 텍스트의 각 문자를 코드로 변환하여 압축된 텍스트를 생성한다.

5.허프만 트리는 상향식으로 만드는 이진 트리로, 이를 생성하는 과정에서 욕심쟁이 방법이 적용된다.
	1)처음에는 각 문자가 하나의 노드로 구성된 개별적인 트리로 표현되며, 각 노드는 빈도수로 표시된다.
	2)빈도수가 작은 두 트리를 합쳐서 보다 큰 트리를 만들어 나가는데, 이때 합쳐지는 두 트리를 자식
	노드로 갖는 부모 노드가 생성되고 부모 노드의 빈도수는 두 자식 트리의 빈도수의 합으로 표시하고,
	좌우의 두 간선은 각각 0과 1 로 레이블 된다.이 과정을 반복하여 허프만 트리 하나가 생성된다.
	3)각 문자의 코드는 루트 노드로부터 리프노드까지 0과1을 붙이면 된다.

##허프만 트리 단점
허프만 코딩에서는 각 문자의 빈도수를 모르는 경우 텍스트를 두번 읽어야한다. 텍스트를 두번 읽어야한다면
속도가 상당히 느려지기때문에 실용성이 없다. 따라서 동적으로 읽어나가면서 허프만 코딩을 하는 동적 허프
만 코딩을 사용한다.